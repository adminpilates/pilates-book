generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PSessionType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  capacity    Int
  duration    Int
  color       String     @default("bg-blue-100 text-blue-800")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  price       Decimal?   @db.Decimal(10, 2)
  sessions    PSession[]

  @@map("session_types")
}

model PSession {
  id            Int          @id @default(autoincrement())
  sessionTypeId Int          @map("session_type_id")
  date          DateTime     @db.Date
  time          String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bookings      Booking[]
  sessionType   PSessionType @relation(fields: [sessionTypeId], references: [id], onDelete: Cascade)

  @@unique([sessionTypeId, date, time])
  @@map("sessions")
}

model Booking {
  id                String          @id @default(cuid())
  sessionId         Int             @map("session_id")
  fullName          String          @map("full_name")
  email             String
  phone             String
  emergencyContact  String?         @map("emergency_contact")
  emergencyPhone    String?         @map("emergency_phone")
  medicalConditions String?         @map("medical_conditions")
  experience        ExperienceLevel @default(BEGINNER)
  specialRequests   String?         @map("special_requests")
  status            BookingStatus   @default(CONFIRMED)
  bookingDate       DateTime        @default(now()) @map("booking_date")
  cancelledAt       DateTime?       @map("cancelled_at")
  cancelReason      String?         @map("cancel_reason")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  session           PSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum ExperienceLevel {
  BEGINNER
  SOME
  INTERMEDIATE
  ADVANCED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  NO_SHOW
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  username        String?
  displayUsername String?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
